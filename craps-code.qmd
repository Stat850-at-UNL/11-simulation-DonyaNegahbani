---
title: "Craps Simulation"
format: html
---


In this document, you should create, code, and demonstrate each function you described in [`pseudocode.qmd`](pseudocode.qmd).
File your functions under the appropriate header. 
Each function should have its own code chunk, which is properly set up with the appropriate programming language indicated.
I have provided skeleton code chunks for your required functions using R syntax, but you are free to use Python or any other language covered in class. 
Please delete or fill in my chunks with your own code.

Make sure this document compiles before you submit your answers.

# Helper Functions

## `roll_dice`

```{r}
roll_dice <- function() {
  die1 <- sample(1:6, 1) 
  die2 <- sample(1:6, 1)  
  total <- die1 + die2
  return(total)
}

```

```{r}
roll_dice()  

```
```{r}
eval_first_roll <- function(roll) {
  if (roll %in% c(7, 11)) {
    return(list(outcome = "win", point = NA))
  } else if (roll %in% c(2, 3, 12)) {
    return(list(outcome = "loss", point = NA))
  } else {
    return(list(outcome = "continue", point = roll))
  }
}

```

```{r}
eval_first_roll(roll_dice())
```


```{r}
eval_point_roll <- function(point, roll) {

  
  if (roll == point) {
    return(list(outcome = "win"))
  } else if (roll == 7) {
    return(list(outcome = "loss"))
  } else {
    return(list(outcome = "continue"))
  }
}

```

```{r}
eval_point_roll(point = 5, roll = roll_dice())  

```

# Main Functions

## `simulate_craps_game`
```{r}
simulate_craps_game <- function() {
  # Input: None
  # Output: Data frame with columns `id` (roll number), `roll` (total dice roll), `outcome` (win, loss, or continue), and `point` (if applicable)
  # Description: Simulates a single game of craps, tracking each roll, determining the game's outcome, and recording point values if applicable
  
  roll_count <- 0
  point <- NA
  game_active <- TRUE
  game_data <- data.frame(id = integer(), roll = integer(), outcome = character(), point = integer(), stringsAsFactors = FALSE)
  
  while (game_active) {
    roll_count <- roll_count + 1
    roll <- roll_dice()
    
    if (roll_count == 1) {
      result <- eval_first_roll(roll)
      game_data <- rbind(game_data, data.frame(id = roll_count, roll = roll, outcome = result$outcome, point = result$point))
      if (result$outcome %in% c("win", "loss")) {
        game_active <- FALSE
      } else {
        point <- result$point
      }
    } else {
      result <- eval_point_roll(point, roll)
      game_data <- rbind(game_data, data.frame(id = roll_count, roll = roll, outcome = result$outcome, point = point))
      if (result$outcome %in% c("win", "loss")) {
        game_active <- FALSE
      }
    }
  }
  return(game_data)
}

```

```{r}
simulate_craps_game()
```

## `summarize_craps_game`
```{r}

summarize_craps_game <- function(game_data) {
  n_rolls <- nrow(game_data)
  outcome <- tail(game_data$outcome, n = 1)  # Last outcome of the game
  point <- if (!is.na(game_data$point[1]) && game_data$outcome[1] == "continue") game_data$point[1] else NA
  
  summary <- data.frame(
    n_rolls = n_rolls,
    outcome = outcome,
    point = point,
    stringsAsFactors = FALSE
  )
  return(summary)
}

```

```{r}
library(dplyr)
simulate_craps_game() %>% summarize_craps_game()
```

## `run_craps_simulation`
```{r}
run_craps_simulation <- function(N) {
  
  all_summaries <- data.frame(n_rolls = integer(), outcome = character(), point = integer(), stringsAsFactors = FALSE)
  
  for (i in 1:N) {
    game_data <- simulate_craps_game()
    game_summary <- summarize_craps_game(game_data)
    all_summaries <- rbind(all_summaries, game_summary)
  }
  return(all_summaries)
}

```

```{r}
result <- run_craps_simulation(N=5) # demonstrate result
result
```

